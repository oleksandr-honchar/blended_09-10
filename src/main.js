// /*
//   –°—Ç–≤–æ—Ä–∏ —Å–ø–∏—Å–æ–∫ —Å–ø—Ä–∞–≤.
//   –ù–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ —î –¥–≤–∞ —ñ–Ω–ø—É—Ç–∏ —è–∫—ñ –º–∞—î –≤–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞–∑–≤–∞ —ñ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á—ñ.
//   –ü—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "Add" –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ–¥–∞—î—Ç—å—Å—è –¥–æ —Å–ø–∏—Å–∫—É #task-list.

//   –£ –∫–æ–∂–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏ –º–∞—î –±—É—Ç–∏ –∫–Ω–æ–ø–∫–∞ "Delete", —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ
//   –ø—Ä–∏–±—Ä–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É.
//   –°–ø–∏—Å–æ–∫ —ñ–∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ –º–∞—î –±—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–º –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏.

//   –†–æ–∑–º—ñ—Ç–∫–∞ –∫–∞—Ä—Ç–∫–∏ –∑–∞–¥–∞—á—ñ
//   <li class="task-list-item">
//       <button class="task-list-item-btn">Delete</button>
//       <h3>–ó–∞–≥–æ–ª–æ–≤–æ–∫</h3>
//       <p>–¢–µ–∫—Å—Ç</p>
//   </li>
// */

// import { taskForm, taskName, taskDescription } from './js/refs.js'; // Import refs correctly
// import { createTask } from './js/tasks.js'; // Import function to create tasks
// import { addTasks } from './js/render-tasks.js'; // Function to render tasks
// import { getFromLocalStorage } from './js/local-storage-api.js'; // To get tasks from local storage

// taskForm.addEventListener('submit', createTask); // Add event listener for form submission

// // Fetch tasks from local storage and render them if they exist
// const tasks = getFromLocalStorage();
// if (tasks.length) {
//   addTasks(tasks); // Render tasks if they exist
// }

const form = document.getElementById('task-form');
const taskList = document.getElementById('task-list');

const TASKS_KEY = 'tasks-data';

// üíæ Load tasks from localStorage
function loadTasks() {
  const tasks = JSON.parse(localStorage.getItem(TASKS_KEY)) || [];
  tasks.forEach(task => renderTask(task));
}

// üí° Render a single task card
function renderTask({ title, description }) {
  const li = document.createElement('li');
  li.className = 'task-list-item';
  li.innerHTML = `
    <button class="task-list-item-btn">Delete</button>
    <h3>${title}</h3>
    <p>${description}</p>
  `;
  taskList.appendChild(li);

  li.querySelector('button').addEventListener('click', () => {
    li.remove();
    deleteTask(title, description);
  });
}

// ‚ûï Save a new task
function saveTask(task) {
  const tasks = JSON.parse(localStorage.getItem(TASKS_KEY)) || [];
  tasks.push(task);
  localStorage.setItem(TASKS_KEY, JSON.stringify(tasks));
}

// ‚ùå Delete task from localStorage
function deleteTask(title, description) {
  let tasks = JSON.parse(localStorage.getItem(TASKS_KEY)) || [];
  tasks = tasks.filter(
    task => task.title !== title || task.description !== description
  );
  localStorage.setItem(TASKS_KEY, JSON.stringify(tasks));
}

// üöÄ Handle form submission
form.addEventListener('submit', e => {
  e.preventDefault();
  const title = form.taskName.value.trim();
  const description = form.taskDescription.value.trim();

  if (!title || !description) return;

  const task = { title, description };
  renderTask(task);
  saveTask(task);
  form.reset();
});

// üß† Initial load
loadTasks();
